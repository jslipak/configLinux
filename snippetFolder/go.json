{"err!login":{"prefix":"err!login","body":["if err != nil {","\tcontext.JSON(http.StatusInternalServerError, gin.H{\"message\": \"Could not authenticate user.\"})","\treturn","}"]},"err!parse":{"body":["if err != nil {","\tcontext.JSON(http.StatusBadRequest, gin.H{\"message\": \"Could not parse request data.\"})","\treturn","}"],"prefix":"err!parse"},"hashPass":{"prefix":"hashPass","body":["func HashPassword(password string) (string, error) {","\tbytes, err := bcrypt.GenerateFromPassword([]byte(password), ${1:complex:15})","\treturn string(bytes), err","}"]},"err!":{"body":["if err != nil {","\treturn err","}"],"prefix":"err!"},"hashCheckPass":{"body":["func CheckPasswordHash(password, hashedPassword string) bool {","\terr := bcrypt.CompareHashAndPassword([]byte(password), []byte(hashedPassword))","\treturn err == nil","}"],"prefix":"hashCheckPass"}}